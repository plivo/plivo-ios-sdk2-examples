#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
#ifndef PLIVOVOICEKIT_SWIFT_H
#define PLIVOVOICEKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Dispatch;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="PlivoVoiceKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSString;

SWIFT_CLASS("_TtC13PlivoVoiceKit11Environment")
@interface Environment : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sipDomain;)
+ (NSString * _Nonnull)sipDomain SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull bundleId;)
+ (NSString * _Nonnull)bundleId SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, PlivoCallState, open) {
  PlivoCallStateDialing = 0,
  PlivoCallStateRinging = 1,
  PlivoCallStateOngoing = 2,
  PlivoCallStateTerminated = 3,
};

@class NSNumber;

SWIFT_CLASS("_TtC13PlivoVoiceKit13PlivoEndpoint")
@interface PlivoEndpoint : NSObject
@property (nonatomic, strong) id _Nullable delegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)init:(NSDictionary * _Nonnull)options;
- (nonnull instancetype)initWithDebug:(BOOL)isDebug :(NSDictionary * _Nonnull)options SWIFT_DEPRECATED_MSG("'initWithDebug:isDebug:initOptions' is deprecated. Use `init:initOptions` or `init:` instead");
@end


@interface PlivoEndpoint (SWIFT_EXTENSION(PlivoVoiceKit))
/// Description
/// \param callUUID callUUID description
///
/// \param startRating startRating description
///
/// \param issues issues description
///
/// \param notes notes description
///
/// \param sendConsoleLog sendConsoleLog description
///
- (void)submitCallQualityFeedback:(NSString * _Nullable)callUUID :(NSInteger)startRating :(NSArray * _Nonnull)issues :(NSString * _Nonnull)notes :(BOOL)sendConsoleLog;
@end



@class PlivoOutgoing;

@interface PlivoEndpoint (SWIFT_EXTENSION(PlivoVoiceKit))
/// Description
///
/// returns:
/// description
- (PlivoOutgoing * _Nullable)createOutgoingCall SWIFT_WARN_UNUSED_RESULT;
/// Description
///
/// returns:
/// description
- (NSString * _Nullable)getLastCallUUID SWIFT_WARN_UNUSED_RESULT;
/// Description
///
/// returns:
/// description
- (NSString * _Nullable)getCallUUID SWIFT_WARN_UNUSED_RESULT;
@end




@interface PlivoEndpoint (SWIFT_EXTENSION(PlivoVoiceKit))
- (void)resetEndpoint;
@end

@class NSData;

@interface PlivoEndpoint (SWIFT_EXTENSION(PlivoVoiceKit))
- (void)login:(NSString * _Nonnull)username andPassword:(NSString * _Nonnull)password;
- (void)login:(NSString * _Nonnull)username andPassword:(NSString * _Nonnull)password regTimeout:(NSInteger)regTimeout;
- (void)login:(NSString * _Nonnull)username andPassword:(NSString * _Nonnull)password deviceToken:(NSData * _Nullable)token;
- (void)login:(NSString * _Nonnull)username andPassword:(NSString * _Nonnull)password deviceToken:(NSData * _Nullable)token certificateId:(NSString * _Nonnull)certificateId;
/// Send device token in SIP header
/// \param token device apns token
///
- (void)registerToken:(NSData * _Nonnull)token SWIFT_DEPRECATED_MSG("'registerToken:token' is deprecated. Use `login:username:password:token` instead");
/// Description
/// \param pushinfo pushinfo description
///
- (void)relayVoipPushNotification:(NSDictionary * _Nonnull)pushinfo;
/// Following three apis required for the apple Callkit integration. Configure audio session before the call.
- (void)configureAudioDevice;
/// Depending on the call status(Hold or Active) you’ll want to start, or stop processing the call’s audio.
- (void)startAudioDevice;
/// Depending on the call status(Hold or Active) you’ll want to start, or stop processing the call’s audio.
- (void)stopAudioDevice;
/// Send Keep Alive packet while in background mode
- (void)keepAlive;
/// Unregisters an endpoint , Calling this method with would unregister the SIP endpoint
- (void)logout;
@end

@class PlivoIncoming;

SWIFT_PROTOCOL("_TtP13PlivoVoiceKit21PlivoEndpointDelegate_")
@protocol PlivoEndpointDelegate
@optional
/// This delegate gets called when registration to an endpoint is successful.
- (void)onLogin;
/// This delegate gets called when registration to an endpoint fails.
- (void)onLoginFailed SWIFT_DEPRECATED_MSG("This method will be deprecated, please use 'onLoginFailedWithError:");
/// This delegate gets called when registration to an endpoint fails.
/// \param error reason of failure
///
- (void)onLoginFailedWithError:(NSError * _Nonnull)error;
/// This delegate gets called when endpoint logged out.
- (void)onLogout;
/// On an incoming call to a registered endpoint, this delegate receives a PlivoIncoming object.
/// \param incoming PlivoIncoming object.
///
- (void)onIncomingCall:(PlivoIncoming * _Nonnull)incoming;
/// On an incoming call, if the call is answered by the caller, this delegate would be triggered with the PlivoIncoming object.
/// \param incoming PlivoIncoming object
///
- (void)onIncomingCallAnswered:(PlivoIncoming * _Nonnull)incoming;
/// On an incoming call, if the call is disconnected by the caller, this delegate would be triggered with the PlivoIncoming object.
/// \param incoming PlivoIncoming object
///
- (void)onIncomingCallRejected:(PlivoIncoming * _Nonnull)incoming;
/// On an incoming call, if the call gets timed out, this delegate would be triggered.
/// \param incoming PlivoIncoming object
///
- (void)onIncomingCallInvalid:(PlivoIncoming * _Nonnull)incoming;
/// On an incoming call, if the call is disconnected by the caller after being answered, this delegate would be triggered with the PlivoIncoming object.
/// \param incoming PlivoIncoming object
///
- (void)onIncomingCallHangup:(PlivoIncoming * _Nonnull)incoming;
/// On an active endpoint, this delegate would be called with the digit received on the call.
/// \param digit DTMF digit in string
///
- (void)onIncomingDigit:(NSString * _Nonnull)digit;
/// When an outgoing call is started, this delegate would be called with the PlivoOutgoing object.
/// \param call PlivoOutgoing object
///
- (void)onCalling:(PlivoOutgoing * _Nonnull)call;
/// When an outgoing call is answered, this delegate would be called with the PlivoOutgoing object.
/// \param call PlivoOutgoing object
///
- (void)onOutgoingCallAnswered:(PlivoOutgoing * _Nonnull)call;
/// When an outgoing call is ringing, this delegate would be called with the PlivoOutgoing object.
/// \param call PlivoOutgoing object
///
- (void)onOutgoingCallRinging:(PlivoOutgoing * _Nonnull)call;
/// When an outgoing call is rejected by the called number, this delegate would be called with the PlivoOutgoing object.
/// \param call PlivoOutgoing object
///
- (void)onOutgoingCallRejected:(PlivoOutgoing * _Nonnull)call;
/// When an outgoing call is made to an invalid number, this delagate would be called with the PlivoOutgoing object.
/// \param call PlivoOutgoing object
///
- (void)onOutgoingCallInvalid:(PlivoOutgoing * _Nonnull)call;
/// When an outgoing call is disconnected by the called number after the call has been answered.
/// \param call PlivoOutgoing object
///
- (void)onOutgoingCallHangup:(PlivoOutgoing * _Nonnull)call;
/// When the user feedback is successfully submitted to the server.
/// \param statusCode HTTP status code
///
- (void)onFeedbackSuccess:(NSInteger)statusCode;
/// When the user feedback request is failed due to some reason.
/// \param error reason of failure
///
- (void)onFeedbackFailure:(NSError * _Nonnull)error;
/// When the user feedback request is failed due to some reason, And returns an error reason.
/// \param validationErrorMessage reason of failure
///
- (void)onFeedbackValidationError:(NSString * _Nonnull)validationErrorMessage;
/// When the media metrics are available.
/// \param mediaInfo media metrics data in dictionary.
///
- (void)mediaMetrics:(NSDictionary * _Nonnull)mediaInfo;
- (void)logs:(NSString * _Nonnull)value level:(NSString * _Nonnull)level;
- (void)rtpStats:(NSString * _Nonnull)value;
@end


SWIFT_CLASS("_TtC13PlivoVoiceKit13PlivoIncoming")
@interface PlivoIncoming : NSObject
/// The callId of the call
@property (nonatomic, copy) NSString * _Nullable callId;
/// The number/SIP URI from which the call is being received
@property (nonatomic, copy) NSString * _Nonnull fromContact;
/// The SIP URI on which the call is being received
@property (nonatomic, copy) NSString * _Nonnull toContact;
/// The SIP User For Display
@property (nonatomic, copy) NSString * _Nonnull fromUser;
@property (nonatomic, copy) NSString * _Nonnull stirVerification;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Calling this method on the PlivoIncoming object would answer the call.
- (void)answer;
/// Calling this method on the PlivoIncoming object would mute the call.
- (void)mute;
/// Calling this method on the PlivoIncoming object would unmute the call.
- (void)unmute;
/// Calling this method on the PlivoIncoming object with the digits would send DTMF on that call.
/// \param digits DTMF digit
///
- (void)sendDigits:(NSString * _Nonnull)digits;
/// Calling this method on the PlivoIncoming object would disconnect the call.
- (void)hangup;
/// Calling this method on the PlivoIncoming object would reject the call.
- (void)reject;
/// Calling this method on the PlivoIncoming object would disconnect the audio devices during audio interruption.
- (void)hold;
/// Calling this method on the PlivoIncoming object would reconnect the audio devices after audio interruption.
- (void)unhold;
@end

@class NSError;

SWIFT_CLASS("_TtC13PlivoVoiceKit13PlivoOutgoing")
@interface PlivoOutgoing : NSObject
/// The callId of the call
@property (nonatomic, copy) NSString * _Nullable callId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Calling this method on the PlivoOutgoing object with the SIP URI would initiate an outbound call.
/// \param sipURI sipURI
///
- (void)call:(NSString * _Nonnull)sipURI;
/// Calling this method on the PlivoOutgoing object with the SIP URI would initiate an outbound call.
/// \param sipURI sipURI
///
/// \param error error
///
- (void)call:(NSString * _Nonnull)sipURI error:(NSError * _Nonnull * _Nullable)error;
/// Calling this method on the PlivoOutgoing object with the SIP URI would initiate an outbound call with custom SIP headers.
/// \param sipURI sipURI
///
/// \param headers headers
///
- (void)call:(NSString * _Nonnull)sipURI headers:(NSDictionary * _Nonnull)headers;
/// Calling this method on the PlivoOutgoing object with the SIP URI would initiate an outbound call with custom SIP headers.
/// \param sipURI sipURI
///
/// \param headers headers
///
/// \param error error
///
- (void)call:(NSString * _Nonnull)sipURI headers:(NSDictionary * _Nonnull)headers error:(NSError * _Nullable * _Nonnull)error;
/// Calling this method on the PlivoIncoming object with the digits would send DTMF on that call.
/// \param digits DTMF digit
///
- (void)sendDigits:(NSString * _Nonnull)digits;
/// Calling this method on the PlivoOutgoing object would disconnect the call.
- (void)disconnect SWIFT_DEPRECATED_MSG("This method is deprecated, please use 'hangup'");
/// Calling this method on the PlivoIncoming object would disconnect the call.
- (void)hangup;
/// Calling this method on the PlivoIncoming object would mute the call.
- (void)mute;
/// Calling this method on the PlivoIncoming object would unmute the call.
- (void)unmute;
/// Calling this method on the PlivoIncoming object would disconnect the audio devices during audio interruption.
- (void)hold;
/// Calling this method on the PlivoIncoming object would reconnect the audio devices after audio interruption.
- (void)unhold;
@end


@class NSURL;
@class NSURLRequest;
enum WebSocketReadyState : NSInteger;

/// WebSocket objects are bidirectional network streams that communicate over HTTP. RFC 6455.
SWIFT_CLASS("_TtC13PlivoVoiceKit9WebSocket")
@interface WebSocket : NSObject
@property (nonatomic, readonly) NSUInteger hash;
- (BOOL)isEqual:(id _Nullable)other SWIFT_WARN_UNUSED_RESULT;
/// Create a WebSocket connection to a URL; this should be the URL to which the WebSocket server will respond.
- (nonnull instancetype)init:(NSString * _Nonnull)url;
/// Create a WebSocket connection to a URL; this should be the URL to which the WebSocket server will respond.
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url;
/// Create a WebSocket connection to a URL; this should be the URL to which the WebSocket server will respond. Also include a list of protocols.
- (nonnull instancetype)init:(NSString * _Nonnull)url subProtocols:(NSArray<NSString *> * _Nonnull)subProtocols;
/// Create a WebSocket connection to a URL; this should be the URL to which the WebSocket server will respond. Also include a protocol.
- (nonnull instancetype)init:(NSString * _Nonnull)url subProtocol:(NSString * _Nonnull)subProtocol;
/// Create a WebSocket connection from an NSURLRequest; Also include a list of protocols.
- (nonnull instancetype)initWithRequest:(NSURLRequest * _Nonnull)request subProtocols:(NSArray<NSString *> * _Nonnull)subProtocols OBJC_DESIGNATED_INITIALIZER;
/// Create a WebSocket object with a deferred connection; the connection is not opened until the .open() method is called.
- (nonnull instancetype)init;
/// The URL as resolved by the constructor. This is always an absolute URL. Read only.
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
/// A string indicating the name of the sub-protocol the server selected; this will be one of the strings specified in the protocols parameter when creating the WebSocket object.
@property (nonatomic, readonly, copy) NSString * _Nonnull subProtocol;
/// Allow for Self-Signed SSL Certificates. Default is false.
@property (nonatomic) BOOL allowSelfSignedSSL;
/// The queue for firing off events. default is main_queue
@property (nonatomic, strong) dispatch_queue_t _Nullable eventQueue;
/// The current state of the connection; this is one of the WebSocketReadyState constants. Read only.
@property (nonatomic, readonly) enum WebSocketReadyState readyState;
/// Opens a deferred or closed WebSocket connection to a URL; this should be the URL to which the WebSocket server will respond.
- (void)open:(NSString * _Nonnull)url;
/// Opens a deferred or closed WebSocket connection to a URL; this should be the URL to which the WebSocket server will respond.
- (void)openWithNsurl:(NSURL * _Nonnull)url;
/// Opens a deferred or closed WebSocket connection to a URL; this should be the URL to which the WebSocket server will respond. Also include a list of protocols.
- (void)open:(NSString * _Nonnull)url subProtocols:(NSArray<NSString *> * _Nonnull)subProtocols;
/// Opens a deferred or closed WebSocket connection to a URL; this should be the URL to which the WebSocket server will respond. Also include a protocol.
- (void)open:(NSString * _Nonnull)url subProtocol:(NSString * _Nonnull)subProtocol;
/// Opens a deferred or closed WebSocket connection from an NSURLRequest; Also include a list of protocols.
- (void)openWithRequest:(NSURLRequest * _Nonnull)request subProtocols:(NSArray<NSString *> * _Nonnull)subProtocols;
/// Opens a closed WebSocket connection from an NSURLRequest; Uses the same request and protocols as previously closed WebSocket
- (void)open;
/// Closes the WebSocket connection or connection attempt, if any. If the connection is already closed or in the state of closing, this method does nothing.
/// :param: code An integer indicating the status code explaining why the connection is being closed. If this parameter is not specified, a default value of 1000 (indicating a normal closure) is assumed.
/// :param: reason A human-readable string explaining why the connection is closing. This string must be no longer than 123 bytes of UTF-8 text (not characters).
- (void)close:(NSInteger)code reason:(NSString * _Nonnull)reason;
/// Transmits message to the server over the WebSocket connection.
/// :param: message The message to be sent to the server.
- (void)send:(id _Nonnull)message;
/// Transmits a ping to the server over the WebSocket connection.
/// :param: optional message The data to be sent to the server.
- (void)ping:(id _Nonnull)message;
/// Transmits a ping to the server over the WebSocket connection.
- (void)ping;
@end

@protocol WebSocketDelegate;

@interface WebSocket (SWIFT_EXTENSION(PlivoVoiceKit))
/// The events of the WebSocket using a delegate.
@property (nonatomic, strong) id <WebSocketDelegate> _Nullable delegate;
/// Transmits message to the server over the WebSocket connection.
/// :param: text The message (string) to be sent to the server.
- (void)sendWithText:(NSString * _Nonnull)text;
/// Transmits message to the server over the WebSocket connection.
/// :param: data The message (binary) to be sent to the server.
- (void)sendWithData:(NSData * _Nonnull)data;
@end


/// WebSocketDelegate is an Objective-C alternative to WebSocketEvents and is used to delegate the events for the WebSocket connection.
SWIFT_PROTOCOL("_TtP13PlivoVoiceKit17WebSocketDelegate_")
@protocol WebSocketDelegate
/// A function to be called when the WebSocket connection’s readyState changes to .Open; this indicates that the connection is ready to send and receive data.
- (void)webSocketOpen;
/// A function to be called when the WebSocket connection’s readyState changes to .Closed.
- (void)webSocketClose:(NSInteger)code reason:(NSString * _Nonnull)reason wasClean:(BOOL)wasClean;
/// A function to be called when an error occurs.
- (void)webSocketError:(NSError * _Nonnull)error;
@optional
/// A function to be called when a message (string) is received from the server.
- (void)webSocketMessageText:(NSString * _Nonnull)text;
/// A function to be called when a message (binary) is received from the server.
- (void)webSocketMessageData:(NSData * _Nonnull)data;
/// A function to be called when a pong is received from the server.
- (void)webSocketPong;
/// A function to be called when the WebSocket process has ended; this event is guarenteed to be called once and can be used as an alternative to the “close” or “error” events.
- (void)webSocketEnd:(NSInteger)code reason:(NSString * _Nonnull)reason wasClean:(BOOL)wasClean error:(NSError * _Nullable)error;
@end

/// The WebSocketReadyState enum is used by the readyState property to describe the status of the WebSocket connection.
typedef SWIFT_ENUM(NSInteger, WebSocketReadyState, open) {
/// The connection is not yet open.
  WebSocketReadyStateConnecting = 0,
/// The connection is open and ready to communicate.
  WebSocketReadyStateOpen = 1,
/// The connection is in the process of closing.
  WebSocketReadyStateClosing = 2,
/// The connection is closed or couldn’t be opened.
  WebSocketReadyStateClosed = 3,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
#ifndef PLIVOVOICEKIT_SWIFT_H
#define PLIVOVOICEKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Dispatch;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="PlivoVoiceKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSString;

SWIFT_CLASS("_TtC13PlivoVoiceKit11Environment")
@interface Environment : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull sipDomain;)
+ (NSString * _Nonnull)sipDomain SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull bundleId;)
+ (NSString * _Nonnull)bundleId SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, PlivoCallState, open) {
  PlivoCallStateDialing = 0,
  PlivoCallStateRinging = 1,
  PlivoCallStateOngoing = 2,
  PlivoCallStateTerminated = 3,
};

@class NSNumber;

SWIFT_CLASS("_TtC13PlivoVoiceKit13PlivoEndpoint")
@interface PlivoEndpoint : NSObject
@property (nonatomic, strong) id _Nullable delegate;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)init:(NSDictionary * _Nonnull)options;
- (nonnull instancetype)initWithDebug:(BOOL)isDebug :(NSDictionary * _Nonnull)options SWIFT_DEPRECATED_MSG("'initWithDebug:isDebug:initOptions' is deprecated. Use `init:initOptions` or `init:` instead");
@end


@interface PlivoEndpoint (SWIFT_EXTENSION(PlivoVoiceKit))
/// Description
/// \param callUUID callUUID description
///
/// \param startRating startRating description
///
/// \param issues issues description
///
/// \param notes notes description
///
/// \param sendConsoleLog sendConsoleLog description
///
- (void)submitCallQualityFeedback:(NSString * _Nullable)callUUID :(NSInteger)startRating :(NSArray * _Nonnull)issues :(NSString * _Nonnull)notes :(BOOL)sendConsoleLog;
@end



@class PlivoOutgoing;

@interface PlivoEndpoint (SWIFT_EXTENSION(PlivoVoiceKit))
/// Description
///
/// returns:
/// description
- (PlivoOutgoing * _Nullable)createOutgoingCall SWIFT_WARN_UNUSED_RESULT;
/// Description
///
/// returns:
/// description
- (NSString * _Nullable)getLastCallUUID SWIFT_WARN_UNUSED_RESULT;
/// Description
///
/// returns:
/// description
- (NSString * _Nullable)getCallUUID SWIFT_WARN_UNUSED_RESULT;
@end




@interface PlivoEndpoint (SWIFT_EXTENSION(PlivoVoiceKit))
- (void)resetEndpoint;
@end

@class NSData;

@interface PlivoEndpoint (SWIFT_EXTENSION(PlivoVoiceKit))
- (void)login:(NSString * _Nonnull)username andPassword:(NSString * _Nonnull)password;
- (void)login:(NSString * _Nonnull)username andPassword:(NSString * _Nonnull)password regTimeout:(NSInteger)regTimeout;
- (void)login:(NSString * _Nonnull)username andPassword:(NSString * _Nonnull)password deviceToken:(NSData * _Nullable)token;
- (void)login:(NSString * _Nonnull)username andPassword:(NSString * _Nonnull)password deviceToken:(NSData * _Nullable)token certificateId:(NSString * _Nonnull)certificateId;
/// Send device token in SIP header
/// \param token device apns token
///
- (void)registerToken:(NSData * _Nonnull)token SWIFT_DEPRECATED_MSG("'registerToken:token' is deprecated. Use `login:username:password:token` instead");
/// Description
/// \param pushinfo pushinfo description
///
- (void)relayVoipPushNotification:(NSDictionary * _Nonnull)pushinfo;
/// Following three apis required for the apple Callkit integration. Configure audio session before the call.
- (void)configureAudioDevice;
/// Depending on the call status(Hold or Active) you’ll want to start, or stop processing the call’s audio.
- (void)startAudioDevice;
/// Depending on the call status(Hold or Active) you’ll want to start, or stop processing the call’s audio.
- (void)stopAudioDevice;
/// Send Keep Alive packet while in background mode
- (void)keepAlive;
/// Unregisters an endpoint , Calling this method with would unregister the SIP endpoint
- (void)logout;
@end

@class PlivoIncoming;

SWIFT_PROTOCOL("_TtP13PlivoVoiceKit21PlivoEndpointDelegate_")
@protocol PlivoEndpointDelegate
@optional
/// This delegate gets called when registration to an endpoint is successful.
- (void)onLogin;
/// This delegate gets called when registration to an endpoint fails.
- (void)onLoginFailed SWIFT_DEPRECATED_MSG("This method will be deprecated, please use 'onLoginFailedWithError:");
/// This delegate gets called when registration to an endpoint fails.
/// \param error reason of failure
///
- (void)onLoginFailedWithError:(NSError * _Nonnull)error;
/// This delegate gets called when endpoint logged out.
- (void)onLogout;
/// On an incoming call to a registered endpoint, this delegate receives a PlivoIncoming object.
/// \param incoming PlivoIncoming object.
///
- (void)onIncomingCall:(PlivoIncoming * _Nonnull)incoming;
/// On an incoming call, if the call is answered by the caller, this delegate would be triggered with the PlivoIncoming object.
/// \param incoming PlivoIncoming object
///
- (void)onIncomingCallAnswered:(PlivoIncoming * _Nonnull)incoming;
/// On an incoming call, if the call is disconnected by the caller, this delegate would be triggered with the PlivoIncoming object.
/// \param incoming PlivoIncoming object
///
- (void)onIncomingCallRejected:(PlivoIncoming * _Nonnull)incoming;
/// On an incoming call, if the call gets timed out, this delegate would be triggered.
/// \param incoming PlivoIncoming object
///
- (void)onIncomingCallInvalid:(PlivoIncoming * _Nonnull)incoming;
/// On an incoming call, if the call is disconnected by the caller after being answered, this delegate would be triggered with the PlivoIncoming object.
/// \param incoming PlivoIncoming object
///
- (void)onIncomingCallHangup:(PlivoIncoming * _Nonnull)incoming;
/// On an active endpoint, this delegate would be called with the digit received on the call.
/// \param digit DTMF digit in string
///
- (void)onIncomingDigit:(NSString * _Nonnull)digit;
/// When an outgoing call is started, this delegate would be called with the PlivoOutgoing object.
/// \param call PlivoOutgoing object
///
- (void)onCalling:(PlivoOutgoing * _Nonnull)call;
/// When an outgoing call is answered, this delegate would be called with the PlivoOutgoing object.
/// \param call PlivoOutgoing object
///
- (void)onOutgoingCallAnswered:(PlivoOutgoing * _Nonnull)call;
/// When an outgoing call is ringing, this delegate would be called with the PlivoOutgoing object.
/// \param call PlivoOutgoing object
///
- (void)onOutgoingCallRinging:(PlivoOutgoing * _Nonnull)call;
/// When an outgoing call is rejected by the called number, this delegate would be called with the PlivoOutgoing object.
/// \param call PlivoOutgoing object
///
- (void)onOutgoingCallRejected:(PlivoOutgoing * _Nonnull)call;
/// When an outgoing call is made to an invalid number, this delagate would be called with the PlivoOutgoing object.
/// \param call PlivoOutgoing object
///
- (void)onOutgoingCallInvalid:(PlivoOutgoing * _Nonnull)call;
/// When an outgoing call is disconnected by the called number after the call has been answered.
/// \param call PlivoOutgoing object
///
- (void)onOutgoingCallHangup:(PlivoOutgoing * _Nonnull)call;
/// When the user feedback is successfully submitted to the server.
/// \param statusCode HTTP status code
///
- (void)onFeedbackSuccess:(NSInteger)statusCode;
/// When the user feedback request is failed due to some reason.
/// \param error reason of failure
///
- (void)onFeedbackFailure:(NSError * _Nonnull)error;
/// When the user feedback request is failed due to some reason, And returns an error reason.
/// \param validationErrorMessage reason of failure
///
- (void)onFeedbackValidationError:(NSString * _Nonnull)validationErrorMessage;
/// When the media metrics are available.
/// \param mediaInfo media metrics data in dictionary.
///
- (void)mediaMetrics:(NSDictionary * _Nonnull)mediaInfo;
- (void)logs:(NSString * _Nonnull)value level:(NSString * _Nonnull)level;
- (void)rtpStats:(NSString * _Nonnull)value;
@end


SWIFT_CLASS("_TtC13PlivoVoiceKit13PlivoIncoming")
@interface PlivoIncoming : NSObject
/// The callId of the call
@property (nonatomic, copy) NSString * _Nullable callId;
/// The number/SIP URI from which the call is being received
@property (nonatomic, copy) NSString * _Nonnull fromContact;
/// The SIP URI on which the call is being received
@property (nonatomic, copy) NSString * _Nonnull toContact;
/// The SIP User For Display
@property (nonatomic, copy) NSString * _Nonnull fromUser;
@property (nonatomic, copy) NSString * _Nonnull stirVerification;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Calling this method on the PlivoIncoming object would answer the call.
- (void)answer;
/// Calling this method on the PlivoIncoming object would mute the call.
- (void)mute;
/// Calling this method on the PlivoIncoming object would unmute the call.
- (void)unmute;
/// Calling this method on the PlivoIncoming object with the digits would send DTMF on that call.
/// \param digits DTMF digit
///
- (void)sendDigits:(NSString * _Nonnull)digits;
/// Calling this method on the PlivoIncoming object would disconnect the call.
- (void)hangup;
/// Calling this method on the PlivoIncoming object would reject the call.
- (void)reject;
/// Calling this method on the PlivoIncoming object would disconnect the audio devices during audio interruption.
- (void)hold;
/// Calling this method on the PlivoIncoming object would reconnect the audio devices after audio interruption.
- (void)unhold;
@end

@class NSError;

SWIFT_CLASS("_TtC13PlivoVoiceKit13PlivoOutgoing")
@interface PlivoOutgoing : NSObject
/// The callId of the call
@property (nonatomic, copy) NSString * _Nullable callId;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Calling this method on the PlivoOutgoing object with the SIP URI would initiate an outbound call.
/// \param sipURI sipURI
///
- (void)call:(NSString * _Nonnull)sipURI;
/// Calling this method on the PlivoOutgoing object with the SIP URI would initiate an outbound call.
/// \param sipURI sipURI
///
/// \param error error
///
- (void)call:(NSString * _Nonnull)sipURI error:(NSError * _Nonnull * _Nullable)error;
/// Calling this method on the PlivoOutgoing object with the SIP URI would initiate an outbound call with custom SIP headers.
/// \param sipURI sipURI
///
/// \param headers headers
///
- (void)call:(NSString * _Nonnull)sipURI headers:(NSDictionary * _Nonnull)headers;
/// Calling this method on the PlivoOutgoing object with the SIP URI would initiate an outbound call with custom SIP headers.
/// \param sipURI sipURI
///
/// \param headers headers
///
/// \param error error
///
- (void)call:(NSString * _Nonnull)sipURI headers:(NSDictionary * _Nonnull)headers error:(NSError * _Nullable * _Nonnull)error;
/// Calling this method on the PlivoIncoming object with the digits would send DTMF on that call.
/// \param digits DTMF digit
///
- (void)sendDigits:(NSString * _Nonnull)digits;
/// Calling this method on the PlivoOutgoing object would disconnect the call.
- (void)disconnect SWIFT_DEPRECATED_MSG("This method is deprecated, please use 'hangup'");
/// Calling this method on the PlivoIncoming object would disconnect the call.
- (void)hangup;
/// Calling this method on the PlivoIncoming object would mute the call.
- (void)mute;
/// Calling this method on the PlivoIncoming object would unmute the call.
- (void)unmute;
/// Calling this method on the PlivoIncoming object would disconnect the audio devices during audio interruption.
- (void)hold;
/// Calling this method on the PlivoIncoming object would reconnect the audio devices after audio interruption.
- (void)unhold;
@end


@class NSURL;
@class NSURLRequest;
enum WebSocketReadyState : NSInteger;

/// WebSocket objects are bidirectional network streams that communicate over HTTP. RFC 6455.
SWIFT_CLASS("_TtC13PlivoVoiceKit9WebSocket")
@interface WebSocket : NSObject
@property (nonatomic, readonly) NSUInteger hash;
- (BOOL)isEqual:(id _Nullable)other SWIFT_WARN_UNUSED_RESULT;
/// Create a WebSocket connection to a URL; this should be the URL to which the WebSocket server will respond.
- (nonnull instancetype)init:(NSString * _Nonnull)url;
/// Create a WebSocket connection to a URL; this should be the URL to which the WebSocket server will respond.
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url;
/// Create a WebSocket connection to a URL; this should be the URL to which the WebSocket server will respond. Also include a list of protocols.
- (nonnull instancetype)init:(NSString * _Nonnull)url subProtocols:(NSArray<NSString *> * _Nonnull)subProtocols;
/// Create a WebSocket connection to a URL; this should be the URL to which the WebSocket server will respond. Also include a protocol.
- (nonnull instancetype)init:(NSString * _Nonnull)url subProtocol:(NSString * _Nonnull)subProtocol;
/// Create a WebSocket connection from an NSURLRequest; Also include a list of protocols.
- (nonnull instancetype)initWithRequest:(NSURLRequest * _Nonnull)request subProtocols:(NSArray<NSString *> * _Nonnull)subProtocols OBJC_DESIGNATED_INITIALIZER;
/// Create a WebSocket object with a deferred connection; the connection is not opened until the .open() method is called.
- (nonnull instancetype)init;
/// The URL as resolved by the constructor. This is always an absolute URL. Read only.
@property (nonatomic, readonly, copy) NSString * _Nonnull url;
/// A string indicating the name of the sub-protocol the server selected; this will be one of the strings specified in the protocols parameter when creating the WebSocket object.
@property (nonatomic, readonly, copy) NSString * _Nonnull subProtocol;
/// Allow for Self-Signed SSL Certificates. Default is false.
@property (nonatomic) BOOL allowSelfSignedSSL;
/// The queue for firing off events. default is main_queue
@property (nonatomic, strong) dispatch_queue_t _Nullable eventQueue;
/// The current state of the connection; this is one of the WebSocketReadyState constants. Read only.
@property (nonatomic, readonly) enum WebSocketReadyState readyState;
/// Opens a deferred or closed WebSocket connection to a URL; this should be the URL to which the WebSocket server will respond.
- (void)open:(NSString * _Nonnull)url;
/// Opens a deferred or closed WebSocket connection to a URL; this should be the URL to which the WebSocket server will respond.
- (void)openWithNsurl:(NSURL * _Nonnull)url;
/// Opens a deferred or closed WebSocket connection to a URL; this should be the URL to which the WebSocket server will respond. Also include a list of protocols.
- (void)open:(NSString * _Nonnull)url subProtocols:(NSArray<NSString *> * _Nonnull)subProtocols;
/// Opens a deferred or closed WebSocket connection to a URL; this should be the URL to which the WebSocket server will respond. Also include a protocol.
- (void)open:(NSString * _Nonnull)url subProtocol:(NSString * _Nonnull)subProtocol;
/// Opens a deferred or closed WebSocket connection from an NSURLRequest; Also include a list of protocols.
- (void)openWithRequest:(NSURLRequest * _Nonnull)request subProtocols:(NSArray<NSString *> * _Nonnull)subProtocols;
/// Opens a closed WebSocket connection from an NSURLRequest; Uses the same request and protocols as previously closed WebSocket
- (void)open;
/// Closes the WebSocket connection or connection attempt, if any. If the connection is already closed or in the state of closing, this method does nothing.
/// :param: code An integer indicating the status code explaining why the connection is being closed. If this parameter is not specified, a default value of 1000 (indicating a normal closure) is assumed.
/// :param: reason A human-readable string explaining why the connection is closing. This string must be no longer than 123 bytes of UTF-8 text (not characters).
- (void)close:(NSInteger)code reason:(NSString * _Nonnull)reason;
/// Transmits message to the server over the WebSocket connection.
/// :param: message The message to be sent to the server.
- (void)send:(id _Nonnull)message;
/// Transmits a ping to the server over the WebSocket connection.
/// :param: optional message The data to be sent to the server.
- (void)ping:(id _Nonnull)message;
/// Transmits a ping to the server over the WebSocket connection.
- (void)ping;
@end

@protocol WebSocketDelegate;

@interface WebSocket (SWIFT_EXTENSION(PlivoVoiceKit))
/// The events of the WebSocket using a delegate.
@property (nonatomic, strong) id <WebSocketDelegate> _Nullable delegate;
/// Transmits message to the server over the WebSocket connection.
/// :param: text The message (string) to be sent to the server.
- (void)sendWithText:(NSString * _Nonnull)text;
/// Transmits message to the server over the WebSocket connection.
/// :param: data The message (binary) to be sent to the server.
- (void)sendWithData:(NSData * _Nonnull)data;
@end


/// WebSocketDelegate is an Objective-C alternative to WebSocketEvents and is used to delegate the events for the WebSocket connection.
SWIFT_PROTOCOL("_TtP13PlivoVoiceKit17WebSocketDelegate_")
@protocol WebSocketDelegate
/// A function to be called when the WebSocket connection’s readyState changes to .Open; this indicates that the connection is ready to send and receive data.
- (void)webSocketOpen;
/// A function to be called when the WebSocket connection’s readyState changes to .Closed.
- (void)webSocketClose:(NSInteger)code reason:(NSString * _Nonnull)reason wasClean:(BOOL)wasClean;
/// A function to be called when an error occurs.
- (void)webSocketError:(NSError * _Nonnull)error;
@optional
/// A function to be called when a message (string) is received from the server.
- (void)webSocketMessageText:(NSString * _Nonnull)text;
/// A function to be called when a message (binary) is received from the server.
- (void)webSocketMessageData:(NSData * _Nonnull)data;
/// A function to be called when a pong is received from the server.
- (void)webSocketPong;
/// A function to be called when the WebSocket process has ended; this event is guarenteed to be called once and can be used as an alternative to the “close” or “error” events.
- (void)webSocketEnd:(NSInteger)code reason:(NSString * _Nonnull)reason wasClean:(BOOL)wasClean error:(NSError * _Nullable)error;
@end

/// The WebSocketReadyState enum is used by the readyState property to describe the status of the WebSocket connection.
typedef SWIFT_ENUM(NSInteger, WebSocketReadyState, open) {
/// The connection is not yet open.
  WebSocketReadyStateConnecting = 0,
/// The connection is open and ready to communicate.
  WebSocketReadyStateOpen = 1,
/// The connection is in the process of closing.
  WebSocketReadyStateClosing = 2,
/// The connection is closed or couldn’t be opened.
  WebSocketReadyStateClosed = 3,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
