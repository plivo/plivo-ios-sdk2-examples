// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target armv7-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Osize -module-name PlivoVoiceKit
import AVFoundation
import Foundation
import MachO
@_exported import PlivoVoiceKit
import Swift
import SystemConfiguration
import UIKit
import WebRTC
import _Concurrency
public typealias PlivoCallId = Swift.String
public typealias PlivoAccId = Swift.Int
@objc public enum PlivoCallState : Swift.Int {
  case Dialing = 0
  case Ringing
  case Ongoing
  case Terminated
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public var Dialing: PlivoVoiceKit.PlivoCallState {
  get
}
public var Ringing: PlivoVoiceKit.PlivoCallState {
  get
}
public var Ongoing: PlivoVoiceKit.PlivoCallState {
  get
}
public var Terminated: PlivoVoiceKit.PlivoCallState {
  get
}
@_inheritsConvenienceInitializers @objc open class Environment : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
  @objc public static var sipDomain: Swift.String {
    @objc get
  }
  @objc public static var bundleId: Swift.String {
    @objc get
  }
}
@_inheritsConvenienceInitializers @objc public class PlivoOutgoing : ObjectiveC.NSObject {
  public var accId: PlivoVoiceKit.PlivoAccId?
  @objc public var callId: Swift.String?
  public var state: PlivoVoiceKit.PlivoCallState? {
    get
  }
  @objc override dynamic public init()
  @objc deinit
  @objc public func call(_ sipURI: Swift.String)
  @objc public func call(_ sipURI: Swift.String, error: Swift.UnsafeMutablePointer<Foundation.NSError>?)
  @objc public func call(_ sipURI: Swift.String, headers: [Swift.AnyHashable : Any])
  @objc public func call(_ sipURI: Swift.String, headers: [Swift.AnyHashable : Any], error: Swift.UnsafeMutablePointer<Foundation.NSError?>)
  @objc public func sendDigits(_ digits: Swift.String)
  @available(*, deprecated, message: "This method is deprecated, please use 'hangup'")
  @objc public func disconnect()
  @objc public func hangup()
  @objc public func mute()
  @objc public func unmute()
  @objc public func hold()
  @objc public func unhold()
}
@_inheritsConvenienceInitializers @objc public class PlivoIncoming : ObjectiveC.NSObject {
  public var accId: PlivoVoiceKit.PlivoAccId?
  @objc public var callId: PlivoVoiceKit.PlivoCallId?
  @objc public var fromContact: Swift.String
  @objc public var toContact: Swift.String
  @objc public var fromUser: Swift.String
  @objc public var stirVerification: Swift.String
  public var state: PlivoVoiceKit.PlivoCallState? {
    get
  }
  public var extraHeaders: [Swift.AnyHashable : Any] {
    get
    set
  }
  @objc override dynamic public init()
  @objc deinit
  @objc public func answer()
  @objc public func mute()
  @objc public func unmute()
  @objc public func sendDigits(_ digits: Swift.String)
  @objc public func hangup()
  @objc public func reject()
  @objc public func hold()
  @objc public func unhold()
}
public struct WebSocketEvents {
  public var open: () -> ()
  public var close: (_ code: Swift.Int, _ reason: Swift.String, _ wasClean: Swift.Bool) -> ()
  public var error: (_ error: Swift.Error) -> ()
  public var message: (_ data: Any) -> ()
  public var pong: (_ data: Any) -> ()
  public var end: (_ code: Swift.Int, _ reason: Swift.String, _ wasClean: Swift.Bool, _ error: Swift.Error?) -> ()
}
public enum WebSocketBinaryType : Swift.CustomStringConvertible {
  case uInt8Array
  case nsData
  case uInt8UnsafeBufferPointer
  public var description: Swift.String {
    get
  }
  public static func == (a: PlivoVoiceKit.WebSocketBinaryType, b: PlivoVoiceKit.WebSocketBinaryType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public enum WebSocketReadyState : Swift.Int, Swift.CustomStringConvertible {
  case connecting = 0
  case open = 1
  case closing = 2
  case closed = 3
  public var description: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct WebSocketCompression {
  public var on: Swift.Bool
  public var noContextTakeover: Swift.Bool
  public var maxWindowBits: Swift.Int
}
public struct WebSocketService : Swift.OptionSet {
  public typealias RawValue = Swift.UInt
  public init(rawValue value: Swift.UInt)
  public init(nilLiteral: ())
  public static var allZeros: PlivoVoiceKit.WebSocketService {
    get
  }
  public var rawValue: Swift.UInt {
    get
  }
  public static var None: PlivoVoiceKit.WebSocketService {
    get
  }
  public static var VoIP: PlivoVoiceKit.WebSocketService {
    get
  }
  public static var Video: PlivoVoiceKit.WebSocketService {
    get
  }
  public static var Background: PlivoVoiceKit.WebSocketService {
    get
  }
  public static var Voice: PlivoVoiceKit.WebSocketService {
    get
  }
  public typealias ArrayLiteralElement = PlivoVoiceKit.WebSocketService
  public typealias Element = PlivoVoiceKit.WebSocketService
}
public enum WebSocketError : Swift.Error, Swift.CustomStringConvertible {
  case memory
  case needMoreInput
  case invalidHeader
  case invalidAddress
  case network(Swift.String)
  case libraryError(Swift.String)
  case payloadError(Swift.String)
  case protocolError(Swift.String)
  case invalidResponse(Swift.String)
  case invalidCompressionOptions(Swift.String)
  public var description: Swift.String {
    get
  }
  public var details: Swift.String {
    get
  }
}
@objc public protocol WebSocketDelegate {
  @objc func webSocketOpen()
  @objc func webSocketClose(_ code: Swift.Int, reason: Swift.String, wasClean: Swift.Bool)
  @objc func webSocketError(_ error: Foundation.NSError)
  @objc optional func webSocketMessageText(_ text: Swift.String)
  @objc optional func webSocketMessageData(_ data: Foundation.Data)
  @objc optional func webSocketPong()
  @objc optional func webSocketEnd(_ code: Swift.Int, reason: Swift.String, wasClean: Swift.Bool, error: Foundation.NSError?)
}
@objc @_inheritsConvenienceInitializers @objcMembers open class WebSocket : ObjectiveC.NSObject {
  @objc override dynamic open var hash: Swift.Int {
    @objc get
  }
  @objc override dynamic open func isEqual(_ other: Any?) -> Swift.Bool
  @objc convenience public init(_ url: Swift.String)
  @objc convenience public init(url: Foundation.URL)
  @objc convenience public init(_ url: Swift.String, subProtocols: [Swift.String])
  @objc convenience public init(_ url: Swift.String, subProtocol: Swift.String)
  @objc public init(request: Foundation.URLRequest, subProtocols: [Swift.String] = [])
  @objc convenience override dynamic public init()
  @objc open var url: Swift.String {
    @objc get
  }
  @objc open var subProtocol: Swift.String {
    @objc get
  }
  open var compression: PlivoVoiceKit.WebSocketCompression {
    get
    set
  }
  @objc open var allowSelfSignedSSL: Swift.Bool {
    @objc get
    @objc set
  }
  open var services: PlivoVoiceKit.WebSocketService {
    get
    set
  }
  open var event: PlivoVoiceKit.WebSocketEvents {
    get
    set
  }
  @objc open var eventQueue: Dispatch.DispatchQueue? {
    @objc get
    @objc set
  }
  open var binaryType: PlivoVoiceKit.WebSocketBinaryType {
    get
    set
  }
  @objc open var readyState: PlivoVoiceKit.WebSocketReadyState {
    @objc get
  }
  @objc open func open(_ url: Swift.String)
  @objc open func open(nsurl url: Foundation.URL)
  @objc open func open(_ url: Swift.String, subProtocols: [Swift.String])
  @objc open func open(_ url: Swift.String, subProtocol: Swift.String)
  @objc open func open(request: Foundation.URLRequest, subProtocols: [Swift.String] = [])
  @objc open func open()
  @objc open func close(_ code: Swift.Int = 1000, reason: Swift.String = "Normal Closure")
  @objc open func send(_ message: Any)
  @objc open func ping(_ message: Any)
  @objc open func ping()
  @objc deinit
}
public func == (lhs: PlivoVoiceKit.WebSocket, rhs: PlivoVoiceKit.WebSocket) -> Swift.Bool
extension PlivoVoiceKit.WebSocket {
  @objc dynamic public var delegate: PlivoVoiceKit.WebSocketDelegate? {
    @objc get
    @objc set
  }
  @objc dynamic public func send(text: Swift.String)
  @objc dynamic public func send(data: Foundation.Data)
}
@objc public protocol PlivoEndpointDelegate {
  @objc optional func onLogin()
  @available(*, deprecated, message: "This method will be deprecated, please use 'onLoginFailedWithError:")
  @objc optional func onLoginFailed()
  @objc optional func onLoginFailedWithError(_ error: Swift.Error)
  @objc optional func onLogout()
  @objc optional func onIncomingCall(_ incoming: PlivoVoiceKit.PlivoIncoming)
  @objc optional func onIncomingCallAnswered(_ incoming: PlivoVoiceKit.PlivoIncoming)
  @objc optional func onIncomingCallRejected(_ incoming: PlivoVoiceKit.PlivoIncoming)
  @objc optional func onIncomingCallInvalid(_ incoming: PlivoVoiceKit.PlivoIncoming)
  @objc optional func onIncomingCallHangup(_ incoming: PlivoVoiceKit.PlivoIncoming)
  @objc optional func onIncomingDigit(_ digit: Swift.String)
  @objc optional func onCalling(_ call: PlivoVoiceKit.PlivoOutgoing)
  @objc optional func onOutgoingCallAnswered(_ call: PlivoVoiceKit.PlivoOutgoing)
  @objc optional func onOutgoingCallRinging(_ call: PlivoVoiceKit.PlivoOutgoing)
  @objc optional func onOutgoingCallRejected(_ call: PlivoVoiceKit.PlivoOutgoing)
  @objc optional func onOutgoingCallInvalid(_ call: PlivoVoiceKit.PlivoOutgoing)
  @objc optional func onOutgoingCallHangup(_ call: PlivoVoiceKit.PlivoOutgoing)
  @objc optional func onFeedbackSuccess(_ statusCode: Swift.Int)
  @objc optional func onFeedbackFailure(_ error: Swift.Error)
  @objc optional func onFeedbackValidationError(_ validationErrorMessage: Swift.String)
  @objc optional func mediaMetrics(_ mediaInfo: [Swift.AnyHashable : Any])
  @objc optional func logs(_ value: Swift.String, level: Swift.String)
  @objc optional func rtpStats(_ value: Swift.String)
}
public enum ReachabilityError : Swift.Error {
  case failedToCreateWithAddress(Darwin.sockaddr, Swift.Int32)
  case failedToCreateWithHostname(Swift.String, Swift.Int32)
  case unableToSetCallback(Swift.Int32)
  case unableToSetDispatchQueue(Swift.Int32)
  case unableToGetFlags(Swift.Int32)
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public let ReachabilityChangedNotification: Foundation.NSNotification.Name
extension Foundation.NSNotification.Name {
  public static let reachabilityChanged: Foundation.Notification.Name
}
public class Reachability {
  public typealias NetworkReachable = (PlivoVoiceKit.Reachability) -> ()
  public typealias NetworkUnreachable = (PlivoVoiceKit.Reachability) -> ()
  @available(*, unavailable, renamed: "Connection")
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: PlivoVoiceKit.Reachability.NetworkStatus, b: PlivoVoiceKit.Reachability.NetworkStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Connection : Swift.CustomStringConvertible {
    case unavailable, wifi, cellular
    public var description: Swift.String {
      get
    }
    @available(*, deprecated, renamed: "unavailable")
    public static let none: PlivoVoiceKit.Reachability.Connection
    public static func == (a: PlivoVoiceKit.Reachability.Connection, b: PlivoVoiceKit.Reachability.Connection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var whenReachable: PlivoVoiceKit.Reachability.NetworkReachable?
  public var whenUnreachable: PlivoVoiceKit.Reachability.NetworkUnreachable?
  @available(*, deprecated, renamed: "allowsCellularConnection")
  final public let reachableOnWWAN: Swift.Bool
  public var allowsCellularConnection: Swift.Bool
  public var notificationCenter: Foundation.NotificationCenter
  @available(*, deprecated, renamed: "connection.description")
  public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  public var currentReachabilityStatus: PlivoVoiceKit.Reachability.Connection {
    get
  }
  public var connection: PlivoVoiceKit.Reachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main)
  convenience public init(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  convenience public init(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  @objc deinit
}
extension PlivoVoiceKit.Reachability {
  public func startNotifier() throws
  public func stopNotifier()
  @available(*, deprecated, message: "Please use `connection != .none`")
  public var isReachable: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .cellular`")
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .wifi`")
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class PlivoEndpoint : ObjectiveC.NSObject {
  @objc public var delegate: Swift.AnyObject?
  @objc convenience public init(_ options: [Swift.AnyHashable : Any])
  @available(*, deprecated, message: "'initWithDebug:isDebug:initOptions' is deprecated. Use `init:initOptions` or `init:` instead")
  @objc convenience public init(debug isDebug: Swift.Bool, _ options: [Swift.AnyHashable : Any])
  @objc deinit
}
extension PlivoVoiceKit.PlivoEndpoint {
  @objc dynamic public func login(_ username: Swift.String, andPassword password: Swift.String)
  @objc dynamic public func login(_ username: Swift.String, andPassword password: Swift.String, regTimeout: Swift.Int)
  @objc dynamic public func login(_ username: Swift.String, andPassword password: Swift.String, deviceToken token: Foundation.Data?)
  @objc dynamic public func login(_ username: Swift.String, andPassword password: Swift.String, deviceToken token: Foundation.Data?, certificateId: Swift.String)
  @available(*, deprecated, message: "'registerToken:token' is deprecated. Use `login:username:password:token` instead")
  @objc dynamic public func registerToken(_ token: Foundation.Data)
  @objc dynamic public func relayVoipPushNotification(_ pushinfo: [Swift.AnyHashable : Any])
  @objc dynamic public func configureAudioDevice()
  @objc dynamic public func startAudioDevice()
  @objc dynamic public func stopAudioDevice()
  @objc dynamic public func keepAlive()
  @objc dynamic public func logout()
}
extension PlivoVoiceKit.PlivoEndpoint {
  @objc dynamic public func createOutgoingCall() -> PlivoVoiceKit.PlivoOutgoing?
  @objc dynamic public func getLastCallUUID() -> Swift.String?
  @objc dynamic public func getCallUUID() -> Swift.String?
}
extension PlivoVoiceKit.PlivoEndpoint {
  @objc dynamic public func resetEndpoint()
}
extension PlivoVoiceKit.PlivoEndpoint {
  @objc dynamic public func submitCallQualityFeedback(_ callUUID: Swift.String?, _ startRating: Swift.Int, _ issues: [Swift.AnyObject], _ notes: Swift.String, _ sendConsoleLog: Swift.Bool)
}
extension PlivoVoiceKit.PlivoCallState : Swift.Equatable {}
extension PlivoVoiceKit.PlivoCallState : Swift.Hashable {}
extension PlivoVoiceKit.PlivoCallState : Swift.RawRepresentable {}
extension PlivoVoiceKit.WebSocketBinaryType : Swift.Equatable {}
extension PlivoVoiceKit.WebSocketBinaryType : Swift.Hashable {}
extension PlivoVoiceKit.WebSocketReadyState : Swift.Equatable {}
extension PlivoVoiceKit.WebSocketReadyState : Swift.Hashable {}
extension PlivoVoiceKit.WebSocketReadyState : Swift.RawRepresentable {}
@available(*, unavailable, renamed: "Connection")
extension PlivoVoiceKit.Reachability.NetworkStatus : Swift.Equatable {}
@available(*, unavailable, renamed: "Connection")
extension PlivoVoiceKit.Reachability.NetworkStatus : Swift.Hashable {}
extension PlivoVoiceKit.Reachability.Connection : Swift.Equatable {}
extension PlivoVoiceKit.Reachability.Connection : Swift.Hashable {}
